package InterfaceOperationsApp;


/**
* InterfaceOperationsApp/_InterfaceOperationsStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ./Interface/InterfaceOperations.idl
* Sunday, February 19, 2023 6:40:16 PM EST
*/

public class _InterfaceOperationsStub extends org.omg.CORBA.portable.ObjectImpl implements InterfaceOperationsApp.InterfaceOperations
{

  public String cancelMovieTickets (String customerID, String movieID, String movieName, int numberOfTickets)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("cancelMovieTickets", true);
                $out.write_string (customerID);
                $out.write_string (movieID);
                $out.write_string (movieName);
                $out.write_long (numberOfTickets);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return cancelMovieTickets (customerID, movieID, movieName, numberOfTickets        );
            } finally {
                _releaseReply ($in);
            }
  } // cancelMovieTickets


  /**
       * Permission Set - Admin Only.
       * This method add movie for particular movie if exist in hash map
       * and if the movie does not exist it will create a new movie entry.
       * @param movieId
       * @param movieName
       * @param bookingCapacity
       * @return string If operation successful or not
       */
  public String addMovieSlots (String movieId, String movieName, int bookingCapacity)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("addMovieSlots", true);
                $out.write_string (movieId);
                $out.write_string (movieName);
                $out.write_long (bookingCapacity);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return addMovieSlots (movieId, movieName, bookingCapacity        );
            } finally {
                _releaseReply ($in);
            }
  } // addMovieSlots


  /**
       * Permission Set - Admin Only.
       * This method removes the movie if existed.    
       * If movie show exist and customer has booked a ticket then
       * movie gets deleted and will book the same movie in next available slot for that customer.
       * @param movieId
       * @param movieName
       * @return string If operation successful or not
       */
  public String removeMovieSlots (String movieId, String movieName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("removeMovieSlots", true);
                $out.write_string (movieId);
                $out.write_string (movieName);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return removeMovieSlots (movieId, movieName        );
            } finally {
                _releaseReply ($in);
            }
  } // removeMovieSlots


  /**
       * Permission Set - Admin Only.
       * This method shows the availability for a particular movie in all theaters.
       * @param movieName
       * @return string If operation successful or not
       */
  public String listMovieShowsAvailability (String movieName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("listMovieShowsAvailability", true);
                $out.write_string (movieName);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return listMovieShowsAvailability (movieName        );
            } finally {
                _releaseReply ($in);
            }
  } // listMovieShowsAvailability


  /**
       * Permission Set - Admin and User.
       * This method is used tp book movie tickets.
       * @param customerID
       * @param movieId
       * @param movieName
       * @param numberOfTickets
       * @return string If operation successful or not
       */
  public String bookMovieTickets (String customerID, String movieId, String movieName, int numberOfTickets)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("bookMovieTickets", true);
                $out.write_string (customerID);
                $out.write_string (movieId);
                $out.write_string (movieName);
                $out.write_long (numberOfTickets);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return bookMovieTickets (customerID, movieId, movieName, numberOfTickets        );
            } finally {
                _releaseReply ($in);
            }
  } // bookMovieTickets


  /**
       * Permission Set - Admin and User.
       * This method is used tp book movie tickets.
       * @param customerID
       * @return string If operation successful or not
       */
  public String getBookingSchedule (String customerID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getBookingSchedule", true);
                $out.write_string (customerID);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getBookingSchedule (customerID        );
            } finally {
                _releaseReply ($in);
            }
  } // getBookingSchedule

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:InterfaceOperationsApp/InterfaceOperations:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _InterfaceOperationsStub
